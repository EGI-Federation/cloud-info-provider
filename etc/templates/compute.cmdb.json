<%def name="render_string(k, v, comma=True)">
% if v is None:
"${k}": null${',' if comma else ''}
% else:
"${k}": "${v}"${',' if comma else ''}
% endif
</%def>
[
<%
    middleware = attributes['middleware']
    goc_service_type = attributes['dynamic_provider'].goc_service_type
    static_compute_info = attributes['static_compute_info']
    shares = attributes['shares']
    provider_id = static_compute_info['site_id']
    service_id = static_compute_info['compute_service_id']
%>\
    {
        "type": "provider",
        "data": {
            ${render_string('name', static_compute_info['site_name'])}
            ${render_string('country', static_compute_info['site_country'])}
            ${render_string('country_code', static_compute_info['site_country_code'])}
            ${render_string('roc', static_compute_info['site_roc'])}
            ${render_string('subgrid', static_compute_info['site_subgrid'])}
            ${render_string('giis_url', static_compute_info['site_giis_url'], comma=False)}
        }
    },
    {
        "type": "service",
        "data": {
            "provider_id": "${provider_id}",
            "id": "${service_id}",
            ${render_string('service_type', goc_service_type)}
            ${render_string('sitename', static_compute_info['site_name'])}
            "type": "compute",
            % if middleware == "mesos":
            ${render_string('endpoint', static_compute_info['leader'])}
			${render_string('hostname', static_compute_info['leader_info']['hostname'])}
            "properties": {
            <%
                if 'master/gpus_total' in static_compute_info.keys():
                    is_master = True
                    has_gpu = static_compute_info['master/gpus_total']
                elif 'marathon_config' in static_compute_info.keys():
                    is_master = False
                    has_gpu = 'gpu_resources' in static_compute_info['marathon_config']['features']
            %>
                "gpu_support": ${'true' if has_gpu else 'false'},
                % if is_master:
                "num_gpus": ${static_compute_info.get('master/gpus_total', 0)},
                "num_gpus_used": ${static_compute_info.get('master/gpus_used', 0)},
                "num_cpus": ${static_compute_info.get('master/cpus_total')},
                "num_cpus_used": ${static_compute_info.get('master/cpus_used')},
                "mem_total": ${static_compute_info.get('master/mem_total')},
                "mem_used": ${static_compute_info.get('master/mem_used')}
                % else:
                "num_gpus": ${static_compute_info.get('compute_total_accelerators', 0)},
                "num_cpus": ${static_compute_info.get('compute_total_cores', 0)},
                "mem_total": ${static_compute_info.get('compute_total_ram', 0)},
                ${render_string('local_volumes_host_base_path', static_compute_info['compute_local_volumes_host_base_path'])}
                ${render_string('persistent_storage_drivers', static_compute_info['compute_persistent_storage_drivers'])}
                ${render_string('load_balancer_ips', static_compute_info['compute_load_balancer_ips'], comma=False)}
                % endif
            }
            % else:
            <%
                from six.moves import urllib
                host_name = urllib.parse.urlparse(static_compute_info['compute_service_name']).hostname
            %>
            ${render_string('endpoint', static_compute_info['compute_service_name'])}
            ${render_string('hostname', host_name, comma=False)}
            % endif
        }
    }${',' if shares else ''}
% for _vo, _share in shares.items():
<%
    project_id = _share['auth']['project_id']
%>
    {
        "type": "tenant",
        "data": {
            ${render_string('tenant_id', project_id)}
            ${render_string('tenant_name', _vo)}
            "service": "${service_id}"
        }
    },
% for _flavor_id, _flavor in _share['templates'].items():
    {
        "type": "flavor",
        "data": {
            ${render_string('flavor_id', _flavor_id)}
            ${render_string('flavor_name', _flavor['flavor_name'])}
            "num_vcpus": ${_flavor.get('template_cpu', 0)},
            "ram": ${_flavor.get('template_memory', 0)},
            "disk": ${_flavor.get('template_disk', 0)},
            "num_gpus": ${_flavor.get('template_flavor_gpu_number', 0)},
            ${render_string('gpu_vendor', _flavor['template_flavor_gpu_vendor'])}
            ${render_string('gpu_model', _flavor['template_flavor_gpu_model'])}
            "service": "${service_id}",
            ${render_string('tenant_id', project_id)}
            "tenant_name": "${_vo}"
        }
    },
% endfor
% for _image_id, _image in _share['images'].items():
    {
        "type": "image",
        "data": {
            ${render_string('image_id', _image['id'])}
            ${render_string('image_name', _image['image_name'])}
            ${render_string('image_description', _image['image_description'])}
            ${render_string('image_marketplace_id', _image['image_marketplace_id'])}
            ${render_string('architecture', _image['architecture'])}
            ${render_string('type', _image['os_distro'])}
            ${render_string('distribution', _image['os_distro'])}
            ${render_string('version', _image['image_os_version'])}
            ${render_string('image_os', _image['image_os_name'])}
            "gpu_driver": ${'true' if _image['property_image_gpu_driver'] else 'false'},
            ${render_string('gpu_driver_version', _image['property_image_gpu_driver'])}
            "cuda_support": ${'true' if _image['property_image_gpu_cuda'] else 'false'},
            ${render_string('cuda_version', _image['property_image_gpu_cuda'])}
            ${render_string('cuDNN_version', _image['property_image_gpu_cudnn'])}
            "service": "${service_id}",
            ${render_string('tenant_id', project_id)}
            "tenant_name": "${_vo}"
        }
    }${'' if loop.last else ','}
% endfor
% endfor
]
